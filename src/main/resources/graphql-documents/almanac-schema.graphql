"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
) on SCALAR

interface Node {
    id: ID!
}

type Competition implements Node {
    id: ID!
    name: String!
    providerIds: ProviderIds!
    slug: String!
    teams: [Team]
}

type Competitor implements Node {
    firstNames: String!
    id: ID!
    lastName: String!
    providerIds: ProviderIds!
    team: Team
}

type ProviderId {
    id: ID!
    provider: Provider!
}

type ProviderIds {
    fanduel: ProviderId
    fanduelSportsbook: [ProviderId!]!
    numberfire: ProviderId
    opta: ProviderId
    rotowire: ProviderId
    sportradar: ProviderId
    sportsdataio: ProviderId
    sportsdirect: ProviderId
    stats: ProviderId
}

type Fixture implements Node {
    id: ID!
    competition: Competition!
    season: String!
    seasonWeek: Int
    fixtureType: FixtureType
    fixtureDate: DateTime
    status: FixtureStatus!
    nationalBroadcastCode: String
    nationalBroadcastName: String
    broadcastCode: String
    broadcastName: String
    providerIds: ProviderIds!
    competitors: [Competitor]
#    home: HomeAway
#    away: HomeAway
    event: Event
}

type Event implements Node {
    id: ID!
    name: String
    competition: Competition!
    providerIds: ProviderIds!
}

#union HomeAway = Team | Competitor

enum FixtureStatus {
    SCHEDULED,
    POSTPONED,
    LIVE,
    FINAL,
    CANCELLED
}

enum FixtureType {
    PRE_SEASON,
    REGULAR_SEASON,
    POST_SEASON,
    EXHIBITION,
    PLAY_IN_TOURNAMENT,
    BYE_WEEK_DUMMY,
    ALL_STAR,
    IN_SEASON_TOURNAMENT
}

type Injury {
    publishedAt: DateTime!
    injured: Boolean!
    injuryStatus: InjuryStatus
    injuryDetail: String
}

type Query {
    competition(id: ID!): Competition
    competitions(ids: [ID!]!): [Competition]!
    competitor(id: ID!): Competitor
    competitorByProviderId(providerId: ProviderIdInput!): Competitor
    competitors(ids: [ID!]!): [Competitor]!
    competitorsByProviderId(providerIds: [ProviderIdInput!]!): [Competitor]!
    node(id: ID!): Node
    nodes(ids: [ID!]!): [Node]!
    team(id: ID!): Team
    teamByProviderId(providerId: ProviderIdInput!): Team
    teams(ids: [ID!]!): [Team]!
    teamsByProviderId(providerIds: [ProviderIdInput!]!): [Team]!

    fixture(id: ID!): Fixture
    fixtureByProviderId(providerId: ProviderIdInput!): Fixture
    fixtures(ids: [ID!]!): [Fixture]!
    fixturesByProviderId(providerIds: [ProviderIdInput!]!): [Fixture]!
}

type Team implements Node {
    competitors: [Competitor]
    id: ID!
    name: String!
    providerIds: ProviderIds!
}

enum Provider {
    FANDUEL
    FANDUEL_SPORTSBOOK
    NUMBERFIRE
    OPTA
    ROTOWIRE
    SPORTRADAR
    SPORTSDATAIO
    SPORTSDIRECT
    STATS
}

enum InjuryStatus {
    PROBABLE,
    GAME_TIME_DECISION,
    QUESTIONABLE,
    DOUBTFUL,
    DAY_TO_DAY,
    OUT,
    SUSPENSION,
    INJURED_LIST,
    INJURED_RESERVE,
    NOT_ACTIVE,
    DISABLED_LIST,
    UNKNOWN
}

"A slightly refined version of RFC-3339 compliant DateTime Scalar"
scalar DateTime @specifiedBy(url : "https://scalars.graphql.org/andimarek/date-time.html")

input ProviderIdInput {
    id: ID!
    provider: Provider!
}
